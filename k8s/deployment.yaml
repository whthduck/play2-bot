apiVersion: apps/v1
kind: Deployment
metadata:
  name: play2-bot
  labels:
    app.kubernetes.io/name: play2-bot
    app.kubernetes.io/instance: play2-bot
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: play2-bot
      app.kubernetes.io/instance: play2-bot
  template:
    metadata:
      labels:
        app.kubernetes.io/name: play2-bot
        app.kubernetes.io/instance: play2-bot
    spec:
      # affinity:
      #   nodeAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #       nodeSelectorTerms:
      #       - matchExpressions:
      #         - key: node.kubernetes.io/instance-type
      #           operator: In
      #           values:
      #           - vhp-2c-2gb-amd  
      imagePullSecrets:
        - name: dockersecret      
      serviceAccountName: play2-bot
      securityContext:
        {}
      containers:
        - name: app
          securityContext:
            {}
          image: "whthduck/play2-bot:latest"
          imagePullPolicy: Always
          env:         
          - name: APP_NAME
            value: "play2-bot"    
          - name: APP_SECRET
            value: "89116e9e-3f42-4b54-bd07-060b269fde2f"
          - name: HOST
            value: "0.0.0.0"
          - name: PORT
            value: "8080"
          - name: PLAY2_DISCORD_TOKEN
            valueFrom: 
              secretKeyRef:
                name: whthduck-creds
                key: play2-discord-token
          - name: REDIS_HOST
            value: "redis-12374.c295.ap-southeast-1-1.ec2.cloud.redislabs.com"
          - name: REDIS_PORT
            value: "12374"
          - name: REDIS_USER
            value: "default"
          - name: REDIS_PASSWORD
            valueFrom: 
              secretKeyRef:
                name: whthduck-creds
                key: redis-password
          ports:
          - name: http
            containerPort: 8080
            protocol: TCP  
          readinessProbe:
            failureThreshold: 10
            httpGet:
              path: /ready
              port: http
            periodSeconds: 10
          livenessProbe:
            failureThreshold: 10
            httpGet:
              path: /live
              port: http
            periodSeconds: 10
          resources:
            limits:
              cpu: 100m
              memory: 256Mi
            requests:
              cpu: 10m
              memory: 100Mi